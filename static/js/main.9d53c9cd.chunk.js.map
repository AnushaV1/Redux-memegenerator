{"version":3,"sources":["AddMemeForm.js","Meme.js","App.js","serviceWorker.js","rootReducer.js","index.js"],"names":["INITIAL_STATE","url","topText","bottomText","id","AddMemeForm","addMeme","useState","formData","setFormData","handleChange","e","target","name","value","data","onSubmit","preventDefault","uuid","className","htmlFor","type","placeholder","onChange","Meme","deleteMeme","src","alt","onClick","App","memes","useSelector","state","shallowEqual","dispatch","useDispatch","showMemes","map","m","key","console","log","newMeme","meme","Boolean","window","location","hostname","match","rootReducer","action","filter","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mVAGMA,G,MAAgB,CAClBC,IAAK,GACLC,QAAS,GACTC,WAAY,GACZC,GAAG,KAmCQC,EAjCI,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAAa,EACCC,mBAASP,GADV,mBACvBQ,EADuB,KACbC,EADa,KAGxBC,EAAe,SAACC,GAAO,IAAD,EACAA,EAAEC,OAAlBC,EADgB,EAChBA,KAAMC,EADU,EACVA,MACdL,GAAY,SAAAM,GAAI,kCACTA,GADS,kBAEXF,EAAOC,QAWhB,OACI,iCAAM,8CACF,0BAAME,SARO,SAACL,GAClBA,EAAEM,iBACFX,EAAQ,2BAAIE,GAAL,IAAeJ,GAAGc,iBACzBT,EAAYT,IAKsBmB,UAAU,eACpC,2BAAOC,QAAQ,OAAf,OACA,2BAAOC,KAAK,OAAOR,KAAK,MAAMT,GAAG,MAAMkB,YAAY,iBAAiBR,MAAON,EAASP,IAAKsB,SAAUb,IACnG,2BAAOU,QAAQ,WAAf,YACA,2BAAOC,KAAK,OAAOR,KAAK,UAAUT,GAAG,UAAUkB,YAAY,WAAWR,MAAON,EAASN,QAASqB,SAAUb,IACzG,2BAAOU,QAAQ,cAAf,eACA,2BAAOC,KAAK,OAAOR,KAAK,aAAaT,GAAG,aAAakB,YAAY,cAAcR,MAAON,EAASL,WAAYoB,SAAUb,IACzH,+CCRGc,G,MAxBF,SAAC,GAAgD,IAA/CtB,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,WAAYF,EAAyB,EAAzBA,IAAKG,EAAoB,EAApBA,GAAIqB,EAAgB,EAAhBA,WAK7C,OACA,yBAAKN,UAAU,QACX,yBAAKA,UAAU,aACf,0BAAMA,UAAU,YAAYjB,GAC5B,yBAAKwB,IAAKzB,EAAK0B,IAAI,SACnB,0BAAMR,UAAU,eAAehB,EAA/B,KACA,4BAAQC,GAAG,YAAYwB,QAVF,WACjBH,EAAWrB,KASf,c,MCsBWyB,MA/Bf,WACE,IAAMC,EAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,QAAOG,KAC1CC,EAAWC,cAWXC,EAAYN,EAAMO,KAAI,SAAAC,GAAC,OACzB,kBAAC,EAAD,CACEC,IAAKD,EAAElC,GACPF,QAASoC,EAAEpC,QACXC,WAAYmC,EAAEnC,WACdF,IAAOqC,EAAErC,IACTwB,WAAa,kBAXCrB,EAWckC,EAAElC,GAVlCoC,QAAQC,IAAIrC,QACZ8B,EAAS,CAACb,KAAM,cAAejB,OAFd,IAACA,QAcpB,OACE,yBAAKe,UAAU,OACb,kBAAC,EAAD,CAAab,QApBD,SAACoC,GACfR,EAAS,CAAEb,KAAM,WAAYsB,KAAMD,OAoBjC,6BACDN,ICpBeQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBClBAhD,EAAgB,CAAC8B,MAAO,IAsBfmB,EApBK,WAAmC,IAAlCjB,EAAiC,uDAAzBhC,EAAekD,EAAU,uCAClD,OAAOA,EAAO7B,MACV,IAAK,WACD,OAAO,2BACAW,GADP,IAEIF,MAAM,GAAD,mBAAKE,EAAMF,OAAX,gBAAsBoB,EAAOP,UAG1C,IAAK,cACD,OAAO,2BACAX,GADP,IAEIF,MAAOE,EAAMF,MAAMqB,QAAO,SAACR,GAAD,OAASA,EAAKvC,KAAO8C,EAAO9C,QAG9D,QACI,OAAO4B,ICPboB,EAAQC,YAAYJ,GAC1BK,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GACjB,kBAAC,EAAD,QAGFK,SAASC,eAAe,SFkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.9d53c9cd.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport {v4 as uuid} from \"uuid\";\r\nimport \"./AddMemeForm.css\"\r\nconst INITIAL_STATE = {\r\n    url: \"\",\r\n    topText: \"\",\r\n    bottomText: \"\",\r\n    id:\"\"\r\n};\r\nconst AddMemeForm =({addMeme}) => {\r\n    const [formData, setFormData]= useState(INITIAL_STATE);\r\n    \r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData(data => ({\r\n            ...data,\r\n            [name]: value\r\n        })\r\n        )\r\n    }\r\n\r\n    const handleSubmit = (e)=> {\r\n        e.preventDefault();\r\n        addMeme({...formData, id:uuid()})\r\n        setFormData(INITIAL_STATE);\r\n    }\r\n\r\n    return (\r\n        <div> <h1>Meme Generator</h1>\r\n            <form onSubmit={handleSubmit} className=\"AddMemeForm\">\r\n                <label htmlFor=\"url\">URL</label>\r\n                <input type=\"text\" name=\"url\" id=\"url\" placeholder=\"Enter URL Here\" value={formData.url} onChange={handleChange} />\r\n                <label htmlFor=\"topText\">Top Text</label>\r\n                <input type=\"text\" name=\"topText\" id=\"topText\" placeholder=\"Top Text\" value={formData.topText} onChange={handleChange} />\r\n                <label htmlFor=\"bottomText\">Bottom Text</label>\r\n                <input type=\"text\" name=\"bottomText\" id=\"bottomText\" placeholder=\"Bottom Text\" value={formData.bottomText} onChange={handleChange} />\r\n            <button>Add Meme</button>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default AddMemeForm;","import React from \"react\";\r\nimport \"./Meme.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Meme = ({topText, bottomText, url, id, deleteMeme}) => {\r\n    const handleDelete = () => {\r\n        deleteMeme(id);\r\n    }\r\n\r\nreturn (\r\n<div className=\"Meme\">\r\n    <div className=\"container\">\r\n    <span className=\"top-text\">{topText}</span>\r\n    <img src={url} alt=\"meme\" />\r\n    <span className=\"bottom-text\">{bottomText} </span>\r\n    <button id=\"deleteBtn\" onClick={handleDelete}>Delete</button>\r\n    </div>\r\n</div>\r\n\r\n)\r\n}\r\nMeme.propTypes = {\r\n    topText: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n    bottomText: PropTypes.string.isRequired\r\n};\r\n\r\n\r\nexport default Meme;","import React from 'react';\nimport { useSelector, useDispatch,shallowEqual } from \"react-redux\";\nimport AddMemeForm from \"./AddMemeForm\";\nimport Meme from \"./Meme\";\nimport './App.css';\n\nfunction App() {\n  const memes = useSelector(state => state.memes, shallowEqual);\n  const dispatch = useDispatch();\n\n  const addMeme = (newMeme) => {\n    dispatch({ type: \"ADD_MEME\", meme: newMeme });\n  }\n\n  const deleteMeme = (id) =>{\n    console.log(id)\n    dispatch({type: \"REMOVE_MEME\", id });\n  }\n\n  const showMemes = memes.map(m => (\n      <Meme\n        key={m.id}\n        topText={m.topText}\n        bottomText={m.bottomText}\n        url = {m.url}\n        deleteMeme ={()=>deleteMeme(m.id)} /> \n  ))\n\n  return (\n    <div className=\"App\">\n      <AddMemeForm addMeme={addMeme} />\n      <hr />\n    {showMemes}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const INITIAL_STATE = {memes: []};\r\n\r\nconst rootReducer = (state = INITIAL_STATE, action)=> {\r\n    switch(action.type){\r\n        case 'ADD_MEME':\r\n            return {\r\n                ...state,\r\n                memes:[...state.memes, {...action.meme}]\r\n            }\r\n\r\n        case 'REMOVE_MEME':\r\n            return {\r\n                ...state,\r\n                memes: state.memes.filter((meme)=> meme.id !== action.id)\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n    \r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from \"react-redux\";\nimport {createStore} from \"redux\";\nimport rootReducer from \"./rootReducer\";\n\nconst store = createStore(rootReducer);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}